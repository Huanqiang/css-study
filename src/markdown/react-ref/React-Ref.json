{"content":"<h1 id=\"react-ref\"><code>React Ref</code></h1>\n<p>我们都知道函数组件是不能使用Ref，因为其没有实例。</p>\n<pre><code class=\"hljs js\">function <span class=\"hljs-type\">MyFunctionComponent</span>() {\n  <span class=\"hljs-keyword\">return</span> &lt;input /&gt;;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  constructor(props) {\n    <span class=\"hljs-keyword\">super</span>(props);\n    <span class=\"hljs-keyword\">this</span>.textInput = <span class=\"hljs-type\">React</span>.createRef();\n  }\n  render() {\n    <span class=\"hljs-comment\">// This will *not* work!</span>\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;<span class=\"hljs-type\">MyFunctionComponent</span> ref={<span class=\"hljs-keyword\">this</span>.textInput} /&gt;\n    );\n  }\n}</code></pre>\n<p>如果要在函数组件中使用 <code>ref</code>，你可以使用 <a href=\"https://zh-hans.reactjs.org/docs/forwarding-refs.html\"><code>forwardRef</code></a>（可与 <a href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html#useimperativehandle\"><code>useImperativeHandle</code></a> 结合使用），或者可以将该组件转化为 class 组件。</p>\n<h2 id=\"forwardref\"><code>forwardRef</code></h2>\n<p>使用 <code>forwardRef</code>，函数组件的第二个参数即为 <code>ref</code>，用于获取传递给它的 <code>ref</code>，然后转发到它渲染的 DOM <code>button</code>，如下代码：</p>\n<pre><code class=\"hljs js\">const FancyButton = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">React</span>.</span></span>forward<span class=\"hljs-constructor\">Ref((<span class=\"hljs-params\">props</span>, <span class=\"hljs-params\">ref</span>)</span> =&gt; (\n  &lt;button <span class=\"hljs-built_in\">ref</span>={<span class=\"hljs-built_in\">ref</span>} className=<span class=\"hljs-string\">\"FancyButton\"</span>&gt;\n    {props.children}\n  &lt;/button&gt;\n));\n\n<span class=\"hljs-comment\">// 你可以直接获取 DOM button 的 ref：</span>\nconst <span class=\"hljs-built_in\">ref</span> = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">React</span>.</span></span>create<span class=\"hljs-constructor\">Ref()</span>;\n&lt;FancyButton <span class=\"hljs-built_in\">ref</span>={<span class=\"hljs-built_in\">ref</span>}&gt;Click me!&lt;/FancyButton&gt;;</code></pre>\n<p>以下是对上述示例发生情况的逐步解释：</p>\n<ol>\n<li>我们通过调用 <code>React.createRef</code> 创建了一个 <a href=\"https://zh-hans.reactjs.org/docs/refs-and-the-dom.html\">React ref</a> 并将其赋值给 <code>ref</code> 变量。</li>\n<li>我们通过指定 <code>ref</code> 为 JSX 属性，将其向下传递给 <code>&lt;FancyButton ref={ref}&gt;</code>。</li>\n<li>React 传递 <code>ref</code> 给 <code>forwardRef</code> 内函数 <code>(props, ref) =&gt; ...</code>，作为其第二个参数。</li>\n<li>我们向下转发该 <code>ref</code> 参数到 <code>&lt;FancyButton ref={ref}&gt;</code>，将其指定为 JSX 属性。</li>\n<li>当 ref 挂载完成，<code>ref.current</code> 将指向 <code>&lt;button&gt;</code> DOM 节点。</li>\n</ol>\n<h2 id=\"forwardref--useimperativehandle\"><code>forwardRef</code> + <code>useImperativeHandle</code></h2>\n<p>使用了 <code>forwardRef</code> 后，函数组件所做的其实仅仅是转发了父组件传递的 <code>ref</code>，这个 <code>ref</code> 并不是指向的组件本身。但是如果使用 <code>useImperativeHandle</code>，那就不一样了，ref 指向了一个新的对象，这个对象的属性可以任意设置。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">FancyInput</span>(<span class=\"hljs-params\">props, ref</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> inputRef = useRef();\n  useImperativeHandle(ref, () =&gt; ({\n    <span class=\"hljs-attr\">focus</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      inputRef.current.focus();\n    }\n  }));\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputRef}</span> <span class=\"hljs-attr\">...</span> /&gt;</span></span>;\n}\nFancyInput = forwardRef(FancyInput);\n\n<span class=\"hljs-comment\">// 使用</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Father</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> inputRef = useRef();\n\n    <span class=\"hljs-keyword\">const</span> click = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    inputRef.current.focus()\n  }\n\n  <span class=\"hljs-keyword\">return</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{click}</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FancyInput</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{inputRef}</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>)\n}</code></pre>\n<p>在本例中，子组件 FancyInput 为 Ref 绑定了一个对象，父组件可以通过 ref 获取到这个对象的值（父组件 <code>Father</code> 可以通过 <code>inputRef.current</code> 调用到新对象的<code>focus()</code> 方法），但是值得注意的，这个对象并不是函数组件 <code>FancyInput</code> 的实例，仅仅是一个新的对象，因为函数组件没有实例。</p>\n"}