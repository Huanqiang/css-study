{"content":"<h1 id=\"pwa\">PWA</h1>\n<h2 id=\"what-is-progressive-web-apps\">What is Progressive Web Apps</h2>\n<p>在移动端，我们习惯于浏览和使用原生 <code>App</code>，而很少使用手机自带的 <code>Web</code> 浏览器，比如 <code>iOS</code> 的 <code>Safari</code>。因为使用浏览器的话，我们还要输入网站地址，或者搜索到该网站，因为 <code>Web App</code> 不会像原生 <code>App</code> 一样出现在桌面上，这就是 <strong>Web App 的入口问题</strong>，而这也会让大部分用户望而却步。不仅如此，还存在一个更为重要的问题：<strong>网络延迟所造成数据加载问题</strong>，在原生 App 中，我们一打开应用就能看到操作界面，而 Web App 则不行，它必须要经过网络加载获取到 <code>HTML</code>、<code>JS</code>、<code>CSS</code> 后，才能显示操作页面，这期间用户就要忍受网络加载时的白屏界面。</p>\n<!-- more -->\n\n<p>而随着 <code>Progressive Web Apps</code> 及其相关技术的出现，<code>Web App</code> 就能很好的解决这两个问题。首先，它能让 <code>Web App</code> 的入口像原生 <code>App</code>一样出现在主界面。其次就是它能在离线环境下使用的 <code>Service Worker</code> 与 <code>Cache Storage</code>，将之前加载的数据保存在本地，从而让用户下一次打开或离线环境时无需忍受白屏加载，能直接看见和使用之前的数据，它也能提高应用的加载速度，从而提高用户体验。然后， <code>Progressive Web Apps</code> 能进一步提高操作系统的集成能力，让 <code>Web App</code> 能在未激活时发送推送通知的 <code>Push API</code> 和 <code>Notification API</code> 等。</p>\n<p>也就是说<code>Progressive Web Apps</code> 能让 <code>Web App</code> 获得与原生 App 一样的用户体验，成为移动端的一等公民。</p>\n<h2 id=\"核心概念\">核心概念</h2>\n<ul>\n<li><strong>响应式</strong>: UI 自适应设备屏幕大小</li>\n<li><strong>类 APP 体验</strong>: 它不应该感觉像网站，而应该（尽可能地）更像 APP</li>\n<li><strong>离线支持</strong>: 它将使用设备存储以提供离线体验</li>\n<li><strong>可安装的</strong>: 设备浏览器可提示用户安装你的 APP</li>\n<li><strong>重新参与</strong>: 推送通知以帮助用户在安装之后重新探索你 APP 中功能</li>\n<li><strong>可发现的</strong>: 搜索引擎及 SEO 优化比应用商店可提供更多用户</li>\n<li><strong>新颖</strong>: 一旦 APP 是在线的，它会更新自身及其内容</li>\n<li><strong>安全</strong>: 它使用 HTTPS</li>\n<li><strong>渐进式</strong>: 它可以在任何设备上工作，包括老旧设备，即使功能受限（例如，只是和网站类似，不可安装）</li>\n<li><strong>可链接的</strong>: 使用 URL 时非常易于指向</li>\n</ul>\n<h2 id=\"关键技术\">关键技术</h2>\n<h3 id=\"service-workers\">Service Workers</h3>\n<p>简单地说，Service Worker 是一个特殊的 <code>Web Worker</code>，它是一个与运行在 <code>worker context</code> 中的网页相关的 <code>JS</code> 文件。它是<strong>网页与网络之间的可编程代理，可拦截和缓存网络请求，从而有效地为应用创建离线优先体验</strong>。配合随之引入 <code>Cache Storage API</code>，你可以自由管理 <code>HTTP</code> 请求文件粒度的缓存，这使得 <code>Service Worker</code> 可以从缓存中向 <code>web</code> 应用提供资源。</p>\n<blockquote>\n<p>简单地说， Service Worker 就是为渐进式 Web 应用提供了离线用户体验。</p>\n</blockquote>\n<h3 id=\"app-mainfest\">App Mainfest</h3>\n<p>App Mainfest 是一个 JSON 文件，里面包含了需要暴露给浏览器的元数据，比如名称，icon 的 URL，描述，应用旋转方向等等信息。</p>\n<p>只需要在网站的每个页面头部添加一个 mainfest 连接即可：</p>\n<pre><code class=\"hljs html\">&lt;link <span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-string\">\"mainfest\"</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"/mainfest.json\"</span> /&gt;</code></pre>\n<blockquote>\n<p><a href=\"https://www.w3.org/TR/appmanifest/\">Web App Mainfest</a></p>\n</blockquote>\n<h2 id=\"其他替代方案\">其他替代方案</h2>\n<p>这里聊一聊其他的构建移动端应用的方案。</p>\n<h3 id=\"原生-app\">原生 App</h3>\n<p>这是最直接的一个方案，<code>iOS</code> 你可以使用 <code>Swift</code> 或是 <code>Objective-c</code> 去构建，安卓你可以使用 <code>Java</code> 或者 <code>Kotlin</code> 构建。毫无疑问，构建出来的原生 <code>App</code> 是这些方案中用户体验最好的。</p>\n<p>但是鱼和熊掌不可兼得，如果你的 <code>App</code> 需要横跨 <code>iOS</code> 和 安卓两个平台，那么很不幸，你必须要学习至少两门编程语言，掌握不同的开发流程，同时还要熟悉各个平台的 <code>UI</code> 风格。</p>\n<h3 id=\"hybrid（混合）-app\">Hybrid（混合） App</h3>\n<p>混合 App 使用 Web 技术编写应用，然后通过中间技术在构建的时候生成不同平台的代码，并打包成各个平台的安装包。所以混合 App 只需要编写一次就能随处可用。</p>\n<p>而混合 App 的不足之处则在于我们不能通过它构建各个平台特定的用户体验。</p>\n<h3 id=\"react-native\">React Native</h3>\n<p>参见 《 <a href=\"http://blog.csdn.net/xiangzhihong8/article/details/52623852\">[置顶] React Native 运行原理解析</a> 》</p>\n<h3 id=\"参考资料\">参考资料</h3>\n<ol>\n<li><a href=\"https://www.oschina.net/translate/an-introduction-to-progressive-web-apps?lang=chs&amp;page=2#\">几分钟快速读懂渐进式 Web 应用 PWA</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25167289\">下一代 Web 应用模型 — Progressive Web App - 黄玄</a></li>\n</ol>\n"}