{"content":"<h2 id=\"λ-演算\">λ 演算</h2>\n<blockquote>\n<p>本文是 <code>λ</code> 演算的入门文章，希望大家看文本文能对什么是 <code>λ</code> 演算有个基本的认识。</p>\n</blockquote>\n<p>λ 演算是从数学逻辑中的形式系统（<code>formal system</code>）。它以变量绑定和替换的原则，研究如何使用函数抽象和应用来表示计算。</p>\n<blockquote>\n<p>所谓<a href=\"https://en.wikipedia.org/wiki/Formal_system\"> 形式系统 </a>：这是数学中的东西，它包含了形式语言和推导规则。我们可以从公理出发，通过推导规则推导证明出定理、推论和猜想，从而形成一整套完整的体系，那么这套体系就是一个形式系统。而<a href=\"https://en.wikipedia.org/wiki/Formal_language\"> 形式语言 </a>就是用于表示定理、推导过程的语法。</p>\n</blockquote>\n<h3 id=\"由来\">由来</h3>\n<p>希尔伯特第十问题（判定问题，_Entscheidungsproblem_）：是否能找到一种普遍的算法 ， 可用来判定一个任意形式的丢番图方程（即整系数代数多项式方程）是否有整数解， 从而一劳永逸地解决这类问题？</p>\n<p>如果要解决这个问题，从问题的描述看需要先解决两个问题：1、什么是算法，2、有限次该怎么具体描述。为了解决这些问题，Alan Turing 和 Alonzo Church 各自从不同角度给出了两种计算模型，也就是将计算过程形式化，通过这两个模型能够精确的表示出过程并给出有限次计算的定义。</p>\n<blockquote>\n<p>关于这个问题的历史研究请参考：<a href=\"https://www.changhai.org/articles/science/mathematics/hilbert10/1.php\">Hilbert 第十问题漫谈 (上)</a></p>\n</blockquote>\n<h4 id=\"图灵机\">图灵机</h4>\n<p>图灵在 1936 年发表了《On Computale Number，with an Application to the Entscheidungsproblem》，该论文主要研究了什么样的运算可以用抽象计算机来实现，并提出了一种数学模型 — 图灵机，并证明了不存在解决<a href=\"https://en.wikipedia.org/wiki/Halting_problem\">停机问题</a>的通用算法。此外论文描述了什么是图灵机，并证明了只要实现了图灵机，就可以计算任何<strong>可计算问题</strong>。</p>\n<blockquote>\n<p>这里有一个很关键的名词：可计算问题。首先，我们知道的是在计算机领域，我们所研究的一切问题都是<strong><a href=\"https://en.wikipedia.org/wiki/Computational_problem\">计算问题</a></strong>，而计算问题就是指一切与<strong>计算相关</strong>的问题。比如：</p>\n<ul>\n<li>给定一个正整数 n，判断它是否是素数。</li>\n</ul>\n<p>在计算问题中，有些问题是可以解决的，有些问题是不可解决的，而这就引出了计算问题的可计算性。它可以理解为，<strong>是否存在一个算法，能解决在任何输入下的此计算问题</strong>。比如上述例子，我们可以找到一个算法，并判断其是否是一个素数。所以这是一个可计算问题。</p>\n<p>而有些问题是不可计算的，比如著名的<a href=\"https://zh.wikipedia.org/wiki/%E5%81%9C%E6%9C%BA%E9%97%AE%E9%A2%98\">停机问题</a>，它的表述是这样的：给定一个程序的描述和一个有效的输入，运行程序后，请判断该程序是否能在有限时间内结束，亦或是说陷入了死循环。</p>\n<blockquote>\n<p>此外还有不可判定理论，这就不属于本文的内容了。</p>\n</blockquote>\n<p>图灵的论文证明了对于一个问题，对于任何输入，只要人类可以保证算出结果，那么图灵机就可以保证算出结果。</p>\n</blockquote>\n<p>所以说，图灵清晰地定义了什么是可计算并给出了通用机（图灵机），同时还有计算模型的极限（不存在解决停机问题的通用方法）。所以人们使用物理有段实现了图灵机就能实现机器计算，比如冯诺依曼架构的计算机。</p>\n<blockquote>\n<p>参考：什么是图灵完备？ - Ran C 的回答 - 知乎<br><a href=\"https://www.zhihu.com/question/20115374/answer/288346717\">https://www.zhihu.com/question/20115374/answer/288346717</a></p>\n</blockquote>\n<h4 id=\"λ-演算-1\">λ 演算</h4>\n<p>事实上，在图灵机提出之前，数学家<a href=\"https://zh.wikipedia.org/wiki/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87\">阿隆佐·邱奇</a>就提出了 λ 演算来解决希尔伯特的第十问题 。<code>λ</code> 演算是从数学的角度进行抽象，不关心运算的机械过程而只关心运算的抽象性质，只用最简洁的几条公理便建立起了与图灵机<a href=\"http://en.wikipedia.org/wiki/Turing_machine#Models_equivalent_to_the_Turing_machine_model\">完全等价</a>的计算模型，其体现出来的数学抽象美开出了<a href=\"http://en.wikipedia.org/wiki/Functional_programming\">函数式编程语言</a>，<a href=\"http://en.wikipedia.org/wiki/Lisp_programming_language\">Lisp</a>、<a href=\"http://en.wikipedia.org/wiki/Scheme_(programming_language)\">Scheme</a>、<a href=\"http://www.haskell.org/\">Haskell</a>… 这些以抽象性和简洁美为特点的语言至今仍然活跃在计算机科学界。</p>\n<p>虽然由于其本质上源于 <code>λ</code> 演算的抽象方式不符合人的思维习惯从而注定无法成为主流的编程语言，然而这仍然无法妨碍它们成为编程理论乃至计算机学科的最佳教本。而诞生于函数式编程语言的神奇的<a href=\"http://en.wikipedia.org/wiki/Y_combinator\">Y combinator</a>至今仍然让人们陷入深沉的震撼和反思当中…</p>\n<blockquote>\n<p>λ 演算是图灵完全的，所以说使用纯函数可以模拟图灵机，也就是说纯函数可以模拟所有的面向对象程序。</p>\n<p><a href=\"http://mindhacks.cn/2006/10/15/cantor-godel-turing-an-eternal-golden-diagonal/\">康托尔、哥德尔、图灵——永恒的金色对角线(rev#2)</a></p>\n<p><a href=\"https://www.zhihu.com/question/20773904\">图灵机与 λ 演算是等价的，为什么前者成为了普遍接受的计算机或计算理论的模型？ - 知乎</a></p>\n</blockquote>\n<h3 id=\"λ-演算基础\">λ 演算基础</h3>\n<h4 id=\"表示方法\">表示方法</h4>\n<p>我们先来看一下 λ 演算的表示方式，其表示方式非常简单，只有三种：变量、函数抽象和应用。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">语法</th>\n<th align=\"center\">示例</th>\n<th align=\"center\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">变量</td>\n<td align=\"center\"><code>&lt;variable&gt;</code></td>\n<td align=\"center\"><code>x</code></td>\n<td align=\"center\">定义一个名为 <code>x</code> 的变量</td>\n</tr>\n<tr>\n<td align=\"center\">函数抽象</td>\n<td align=\"center\"><code>λ&lt;name&gt;.&lt;expr&gt;</code></td>\n<td align=\"center\"><code>λx.x</code></td>\n<td align=\"center\">定义一个参数为<code>x</code>，返回<code>x</code>的变量</td>\n</tr>\n<tr>\n<td align=\"center\">应用</td>\n<td align=\"center\"><code>(&lt;func&gt; variable)</code></td>\n<td align=\"center\"><code>(λx.x)a</code></td>\n<td align=\"center\">将变量<code>a</code>的值作用于函数<code>λx.x</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这里举的函数例子就是 <code>I组合子</code> — 恒等函数。</p>\n</blockquote>\n<p><code>λ演算</code> 的三种表达式也可以这样表示：</p>\n<pre><code class=\"hljs json\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">expression</span>&gt;</span>  := <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">variable</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">expression</span>&gt;</span>  := λ <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">variable</span>&gt;</span>.<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">expression</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">expression</span>&gt;</span>  := (<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">function</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">expression</span>&gt;</span>)</code></pre>\n<p>值得注意的是： <code>λ演算</code> 只有函数，而且是一个参数函数，返回值也是函数的单参函数。所以虽然说这里 <code>&lt;variable&gt;</code> 和 <code>(&lt;function&gt; &lt;expression&gt;)</code> 最终代表是还是函数 <code>λ &lt;variable&gt;.&lt;expression&gt;</code>。</p>\n<h4 id=\"运算法则\">运算法则</h4>\n<h5 id=\"α-转换（alpha）\"><code>α-转换</code>（<code>alpha</code>）</h5>\n<p><code>α-转换</code> 规则告诉我们在函数中，变量名称一点也不重要，重要的是变量的位置和括号，比如 <code>λab.ab</code> 和 <code>λxy.xy</code> 其实是同一个函数，而 <code>λab.ab</code> 和 <code>λab.ba</code> 则不是同一个函数。</p>\n<p>我们将通过 <code>α-转换</code> 变换函数参数名称（如 <code>x</code> 变成 <code>y</code> ）记为 <code>α[x / y]</code> 。</p>\n<h5 id=\"β-规约（beta）\"><code>β-规约</code>（<code>beta</code>）</h5>\n<p><code>β-规约</code> 这条规则是指把实参作用到函数的过程，相当于求值的过程。比如：</p>\n<ul>\n<li><code>(λx.x)a</code> 的 <code>β-规约</code>结果为: <code>a</code> ;</li>\n<li><code>(λx.y)a</code> 的 <code>β-规约</code>结果为: <code>y</code> ;</li>\n</ul>\n<h4 id=\"柯里化\">柯里化</h4>\n<p><code>λ演算</code> 的函数都是一个参数函数，返回值也是函数的单参函数。比如 <code>λx.(λy.plus x y)</code>，我们就可以用多参函数表示： <code>λxy.plus x y</code>，而将多参函数转换为单参函数的方法就是<strong><a href=\"https://zh.wikipedia.org/zh-hant/%E6%9F%AF%E9%87%8C%E5%8C%96\">柯里化</a></strong>。</p>\n<p>柯里化的过程就是接受一个多个参数函数，然后返回一个参数为原函数的第一个参数，返回值为原函数剩余参数及其函数体组成的函数（若返回函数仍是多参函数，则继续柯里化）。比如：</p>\n<p>一个多参函数：<code>λxyz.plus x y z</code>，进行柯里化之后为： <code>λx.(λy.(λz.plus x y z))</code>。</p>\n<p>再举个 <code>js</code> 的例子：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> add = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y, z</span>) =&gt;</span> x + y + z\n<span class=\"hljs-comment\">// 调用过程为 : add(1, 2, 3)</span>\n<span class=\"hljs-comment\">// 则进行柯里化之后为：</span>\n<span class=\"hljs-keyword\">const</span> add_curry = <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">y</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">z</span> =&gt;</span> x + y + z\n<span class=\"hljs-comment\">// 调用过程为 : add(1)(2)(3)</span></code></pre>\n<h4 id=\"自由标识符-和-约束变量\">自由标识符 和 约束变量</h4>\n<ul>\n<li>函数 <code>λx.x</code> 中 <code>x</code> 被称为约束变量，因为它既在函数体中又是形参。</li>\n<li>函数 <code>λx.x y</code> 中 <code>y</code> 被称为自由变量，因为它没有在参数中出现。</li>\n</ul>\n<h3 id=\"λ-演算的整数邱齐整数\">λ 演算的整数–邱齐整数</h3>\n<p>在 <code>λ</code> 演算中只有函数，甚至没有整数、字符串，整数是可以由函数表示。</p>\n<pre><code class=\"hljs scheme\"><span class=\"hljs-number\">0</span> : λ<span class=\"hljs-type\">fx.x</span>\n<span class=\"hljs-number\">1</span> : λ<span class=\"hljs-type\">fx.f</span> x\n<span class=\"hljs-number\">2</span> : λ<span class=\"hljs-type\">fx.f</span> (f x)\n<span class=\"hljs-number\">3</span> : λ<span class=\"hljs-type\">fx.f</span> (f (f x))\n...</code></pre>\n<p>在这里，整数的含义是传入的第一个函数 <code>f</code> 被作用的次数。比如 <code>0</code> 就是 <code>f</code> 被调用了 <code>0</code> 次，而 <code>3</code> 则是 <code>f</code> 被调用了<code>3</code> 次。</p>\n<p>以此类推。直观地说，λ 演算中的数字 <code>n</code> 就是一个把函数 <code>f</code> 作为参数并以 <code>f</code> 的 <code>n</code> 次幂为返回值的函数。</p>\n<blockquote>\n<p>邱奇整数是一个<a href=\"https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\">高阶函数</a> – 以单一参数函数 <code>f</code> 为参数，返回另一个单一参数的函数。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97#%CE%BB%E6%BC%94%E7%AE%97%E4%B8%AD%E7%9A%84%E7%AE%97%E8%A1%93\">Wiki 百科：λ 演算中的算术</a></li>\n<li><a href=\"http://cgnail.github.io/academic/%CE%BB-2/\">阿隆佐.丘奇的天才之作——λ 演算中的数字</a> : 强烈推荐</li>\n</ol>\n</blockquote>\n<h4 id=\"后继函数\">后继函数</h4>\n<p>后继函数实际上就是 <code>n + 1</code> 的作用：</p>\n<pre><code class=\"hljs scheme\">SUCC : λn.λf.λ<span class=\"hljs-symbol\">x</span>. f(n f <span class=\"hljs-symbol\">x</span>)</code></pre>\n<p>从邱齐整数的定义我们可以看出，后一个整数比前一个整数多了一次 <code>f</code> 的调用。所以想要进行 <code>n+1</code> 操作，只需要为 <code>n</code> 多调用一次 f 即可构建出整数 <code>n+1</code>。</p>\n<p>为了更好的理解 <code>SUCC</code> 函数，让我们把 <code>SUCC</code> 函数看成 <code>λn.(λf.λx. f(n f x))</code>，这样是不是就更清晰了，这是一个接受整数 <code>n</code>，且返回一个整数函数的单参函数。在让我们看函数的 <code>body</code> 部分，body 中的 <code>(n f x)</code> 部分实际上就是一个需要 <code>β-规约</code> 的部分，因为整数 n 实际上是一个接受 <code>f</code> 和 <code>x</code> 的函数，所以分别应用了 <code>f，x</code> 后，就求值了。</p>\n<p>让我们进行一个计算：<code>SUCC 3</code></p>\n<pre><code class=\"hljs scheme\">SUCC <span class=\"hljs-number\">3</span> = λn.λf.λ<span class=\"hljs-symbol\">x</span>.f(n f <span class=\"hljs-symbol\">x</span>) (<span class=\"hljs-number\">3</span>)\n            = λn.λf.λ<span class=\"hljs-symbol\">x</span>.f(n f <span class=\"hljs-symbol\">x</span>)(λfx.f (f (f <span class=\"hljs-symbol\">x</span>)))    <span class=\"hljs-comment\">// 将整数 3 替换成对应的函数</span>\n            = λn.λf.λ<span class=\"hljs-symbol\">x</span>.f(n f <span class=\"hljs-symbol\">x</span>)(λfa.f (f (f a)))    <span class=\"hljs-comment\">// 对后者函数进行 α-转换， x-&gt;a</span>\n            = λf.λ<span class=\"hljs-symbol\">x</span>.f((λfx.f (f (f <span class=\"hljs-symbol\">x</span>))) f <span class=\"hljs-symbol\">x</span>)            <span class=\"hljs-comment\">// 进行 β-规约，应用f</span>\n            = λf.λ<span class=\"hljs-symbol\">x</span>.f((λ<span class=\"hljs-symbol\">x</span>.f (f (f <span class=\"hljs-symbol\">x</span>))) <span class=\"hljs-symbol\">x</span>)                    <span class=\"hljs-comment\">// 进行 β-规约，应用x</span>\n            = λf.λ<span class=\"hljs-symbol\">x</span>.f(f (f (f <span class=\"hljs-symbol\">x</span>)))\n            = <span class=\"hljs-number\">4</span></code></pre>\n<h4 id=\"加法\">加法</h4>\n<pre><code class=\"hljs scheme\">PLUS : λm.λn.λf.λ<span class=\"hljs-symbol\">x</span>. m f(n f <span class=\"hljs-symbol\">x</span>)</code></pre>\n<p>从上述表示方式，我们可以看出，加法函数比后继函数仅仅多了一个参数<code>m</code>。所以整体上的思路是和上面一样的。</p>\n<p>让我们进行一个计算：<code>PLUS 3 2</code></p>\n<pre><code class=\"hljs scheme\">PULS <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> = λm.λn.λf.λ<span class=\"hljs-symbol\">x</span>.m f(n f <span class=\"hljs-symbol\">x</span>) (<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span>)\n                = λf.λ<span class=\"hljs-symbol\">x</span><span class=\"hljs-number\">.3</span> f(<span class=\"hljs-number\">2</span> f <span class=\"hljs-symbol\">x</span>)\n                = λf.λ<span class=\"hljs-symbol\">x</span>.(λfx.f (f (f <span class=\"hljs-symbol\">x</span>))) f(<span class=\"hljs-number\">2</span> f <span class=\"hljs-symbol\">x</span>)\n                = λf.λ<span class=\"hljs-symbol\">x</span>.f (f (f (<span class=\"hljs-number\">2</span>(f <span class=\"hljs-symbol\">x</span>)))\n                = λf.λ<span class=\"hljs-symbol\">x</span>.f (f (f (λfx.f (f <span class=\"hljs-symbol\">x</span>)(f <span class=\"hljs-symbol\">x</span>)))\n                = λf.λ<span class=\"hljs-symbol\">x</span>.f (f (f (f (f  <span class=\"hljs-symbol\">x</span>))))\n                = <span class=\"hljs-number\">5</span></code></pre>\n<blockquote>\n<p>还有乘法等算术运算请自行查询…</p>\n</blockquote>\n<h4 id=\"逻辑与谓语\">逻辑与谓语</h4>\n<p>首先，我们先看一下邱齐布尔值：</p>\n<pre><code class=\"hljs scheme\"><span class=\"hljs-literal\">TRUE</span>  : λ<span class=\"hljs-type\">xy.x</span>\nFLASE : λ<span class=\"hljs-type\">xy.y</span></code></pre>\n<blockquote>\n<p>事实上， <code>FLASE</code> 就是之前所看到的 邱齐整数 0。</p>\n</blockquote>\n<p>逻辑运算：</p>\n<pre><code class=\"hljs scheme\">AND : λxy. <span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">y</span> TURE\nOR  : λxy. <span class=\"hljs-symbol\">x</span> FLASE <span class=\"hljs-symbol\">y</span>\nNOT : λ<span class=\"hljs-symbol\">x</span>. <span class=\"hljs-symbol\">x</span> FLASE TRUE</code></pre>\n<p>有了这些之后，我们可以做一些逻辑运算了，比如 <code>AND TRUE FALSE</code></p>\n<pre><code class=\"hljs scheme\"><span class=\"hljs-string\">AND</span> <span class=\"hljs-literal\">TRUE</span> <span class=\"hljs-literal\">FALSE</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">(λxy.</span> <span class=\"hljs-string\">x</span> <span class=\"hljs-string\">y</span> <span class=\"hljs-string\">TURE)(TRUE</span> <span class=\"hljs-literal\">FALSE</span><span class=\"hljs-string\">)</span>\n    <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">(λy.</span> <span class=\"hljs-literal\">TRUE</span> <span class=\"hljs-string\">y</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-string\">)(FALSE)</span>    <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">一次</span> <span class=\"hljs-string\">β-规约</span>\n    <span class=\"hljs-string\">=</span> <span class=\"hljs-literal\">TRUE</span> <span class=\"hljs-literal\">FALSE</span> <span class=\"hljs-literal\">TRUE</span>    <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">一次</span> <span class=\"hljs-string\">β-规约</span>\n    <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">(λxy.x)(FLASE</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-string\">)</span>    <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">把第一个</span> <span class=\"hljs-string\">TURE</span> <span class=\"hljs-string\">对应的函数代进来</span>\n    <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">(λy.</span> <span class=\"hljs-string\">FLASE)(TRUE)</span>    <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">一次</span> <span class=\"hljs-string\">β-规约</span>\n    <span class=\"hljs-string\">=</span> <span class=\"hljs-literal\">FALSE</span>    <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">一次</span> <span class=\"hljs-string\">β-规约</span></code></pre>\n<blockquote>\n<p>熟练了的话，这里 2、3 两步可以合成一步完成。</p>\n</blockquote>\n<h3 id=\"y-组合子\">Y 组合子</h3>\n<p>至此，我们的 <code>λ演算</code> 已经完成正常的算术运算和逻辑运算了，但是还存在一点缺陷，那就是递归。</p>\n<p>但是本章的标题是 Y 组合子，和这里说的递归有什么关系？慢慢来，在说<code>Y组合子</code>和递归之前，我们先看下什么是不动点。</p>\n<h4 id=\"不动点\">不动点</h4>\n<p>在数学中，不动点就是 <code>f(x)=x</code>，注意，这里的 <code>f(x)=x</code> 不是一个函数，而是指对于任意函数，存在一个值使得函数 <code>f</code> 的计算结果等于值本身。比如函数 <code>f(x) = x^2^ -3x + 4</code> 的不动点就是 <code>2</code>。所以说，数学中的不动点就是函数映射到本身的那些点。</p>\n<blockquote>\n<p>如何理解不动点定理，请看知乎的回答：<a href=\"https://www.zhihu.com/question/21835995\">https://www.zhihu.com/question/21835995</a></p>\n</blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%8A%A8%E7%82%B9%E7%BB%84%E5%90%88%E5%AD%90\">不动点组合子 </a>就是用来计算其他函数的一个不动点的高阶函数。</p>\n<h4 id=\"y-组合子-1\">Y 组合子</h4>\n<blockquote>\n<p>首先，我们看一下什么是组合子？</p>\n</blockquote>\n<blockquote>\n<p>引用 ajoo 的话:</p>\n</blockquote>\n<p>组合子，英文叫<code>combinator</code>，是函数式编程里面的重要思想。如果说 OO 是归纳法（分析归纳需求，然后根据需求分解问题，解决问题），那么 “面向组合子”就是“演绎法”。通过定义最基本的原子操作，定义基本的组合规则，然后把这些原子以各种方法组合起来。</p>\n<blockquote>\n<p>引用另外一位函数式领域的大师的说法：</p>\n</blockquote>\n<p>A combinator is a function which builds program fragments from program fragments.</p>\n<blockquote>\n<p>强烈推荐: <strong>ajoo</strong>的面向组合子程序设计方法系列文章(推荐一下)：<a href=\"http://www.blogjava.net/ajoo/category/6968.html\">论面向组合子程序设计方法</a></p>\n</blockquote>\n<p><code>Y</code>组合子是<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/Haskell_Curry\">Haskell B. Curry</a>在研究 <code>λ</code> 演算时发现的，它可以得到任意函数的不动点。</p>\n<blockquote>\n<p>正是因为它可以得到任意函数的不动点，所以它可以找出任意递归函数的匿名表示方法，具体推导请参见下一节。</p>\n</blockquote>\n<p><code>Y</code>组合子的表示方法：<code>λf.(λx.f(x x))(λx.f(x x))</code> 。</p>\n<p>让我们看一下 <code>Y</code> 组合子是如何找到任意函数的不动点的，这里我们尝试使用 Y 组合子去找任意函数 <code>G</code> 的不动点：</p>\n<pre><code class=\"hljs scheme\">Y G = λf.(λ<span class=\"hljs-symbol\">x</span>.f(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>))(λ<span class=\"hljs-symbol\">x</span>.f(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>)) (G)\n        = (λ<span class=\"hljs-symbol\">x</span>.G(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>))(λ<span class=\"hljs-symbol\">x</span>.G(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>))\n        = G((λ<span class=\"hljs-symbol\">x</span>.G(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>)) (λ<span class=\"hljs-symbol\">x</span>.G(<span class=\"hljs-symbol\">x</span> <span class=\"hljs-symbol\">x</span>)))\n        = G(Y G)</code></pre>\n<p>我们推导 <code>YG</code> 得到了 <code>G (YG)</code>， 即 <code>YG=G(YG)</code>，所以，我们就得到了任意函数<code>G</code>的不动点 <code>YG</code>。</p>\n<blockquote>\n<p>参考：<a href=\"http://cgnail.github.io/academic/%CE%BB-2/\">递归函数（七）：不动点算子</a></p>\n</blockquote>\n<h4 id=\"递归\">递归</h4>\n<p>其实大家对递归函数都非常熟悉，比如我们非常常见的求阶乘函数就是通过递归实现的：</p>\n<pre><code class=\"hljs scheme\">let <span class=\"hljs-built_in\">fact</span>(<span class=\"hljs-built_in\">n</span>) = <span class=\"hljs-built_in\">if</span> <span class=\"hljs-built_in\">n</span> === <span class=\"hljs-number\">0</span> then <span class=\"hljs-number\">1</span> else <span class=\"hljs-built_in\">n</span> * <span class=\"hljs-built_in\">fact</span>(<span class=\"hljs-built_in\">n</span>-<span class=\"hljs-number\">1</span>)</code></pre>\n<blockquote>\n<p>这是一个语义化的表达方式，让我们转换成 <code>λ</code> 表示式</p>\n</blockquote>\n<pre><code class=\"hljs scheme\">let F = λn.IsZero n <span class=\"hljs-number\">1</span> (Mult n (F (Pred n)))\n<span class=\"hljs-comment\">// 其中:</span>\n<span class=\"hljs-comment\">// IsZero 函数判断接受的n是否等于0，接受三个参数：n、1和 Mult函数；</span>\n<span class=\"hljs-comment\">// Mult 函数表示乘法操作，接受两个参数；</span>\n<span class=\"hljs-comment\">// Pred 函数表示减一操作，接受一个参数</span></code></pre>\n<p>让我们仔细观察上面这个定义，它比起我们之前的 <code>λ</code> 表达式多了 <code>let F =</code> 这一部分，即定义了一个标识符来表示该函数，也就是我们强行给这个函数起了一个函数名。但是我们须知道的一点是：<strong><code>λ</code> 符号的引入就是为了去掉函数名这个冗余，使定义匿名函数成为可能。</strong> 也就是说，在 <code>λ</code> 演算中，函数其实是没有名字的，这里函数的名字只是用来表示函数的本体，让我们少写一点字而已。所以在 <code>λ</code> 演算中，我们可以全用匿名函数来表示递归函数。</p>\n<p>但是从直觉来看，这又怎么可能呢，递归函数调用了函数本身，你连函数本身的名字都没有，怎么做到递归？所以，这就是 Y 组合子的强大之处，因为它做到了。</p>\n<p>还是上面的函数 <code>λn.IsZero n 1 (Mult n (F (Pred n)))</code>，我们把它想象成是另一个函数 <code>G</code> 传入参数 <code>F</code> 后的规约结果，那么这个函数 <code>G</code> 是怎么样子的呢：</p>\n<pre><code class=\"hljs scheme\">G <span class=\"hljs-symbol\">:</span> λf.λn.IsZero <span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">1</span> (Mult <span class=\"hljs-built_in\">n</span> (f (Pred <span class=\"hljs-built_in\">n</span>)))</code></pre>\n<p>然后，我们对 <code>G</code> 做 <code>β-规约</code> （传入 F，就可以得到） ：</p>\n<pre><code class=\"hljs scheme\">G(F) = λf.λn.IsZero <span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">1</span> (Mult <span class=\"hljs-built_in\">n</span> (f (Pred <span class=\"hljs-built_in\">n</span>))) (F)\n        = λn.IsZero <span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">1</span> (Mult <span class=\"hljs-built_in\">n</span> (F (Pred <span class=\"hljs-built_in\">n</span>)))                     // 做一次 β-规约\n        = F</code></pre>\n<p>看到了吗，这里是不是有个上面出现过的东西：<code>G(F) = F</code>，这个不就是不动点（<code>f(x)=x</code>）嘛，所以，现在这个 F 是什么，就是函数 <code>G</code> 的不动点啊，那么现在求函数 F 的这个问题就被巧妙的转换成了求函数 G 的不动点了。</p>\n<p>那么怎么得到函数 <code>G</code> 的不动点呢，上一节我们就提到了，当然是 <code>Y</code> 组合子了，<code>Y</code> 组合子很方便地帮我们找到了函数 G 的不动点 — <code>YG</code>，也就是说，我们已经找到了 <code>F</code> 的匿名表示方式。让我们验证下，这个<code>YG</code> 是不是正确的，我们计算下 <code>Fact 3</code>：</p>\n<pre><code class=\"hljs scheme\">Fact <span class=\"hljs-number\">3</span> = YG <span class=\"hljs-number\">3</span>\n            = G (YG) <span class=\"hljs-number\">3</span>                                                                                        <span class=\"hljs-comment\">// YG = G (YG)</span>\n            = (λf.λn.IsZero n <span class=\"hljs-number\">1</span> (Mult n (f (Pred n)))) (YG) (<span class=\"hljs-number\">3</span>)        <span class=\"hljs-comment\">// 将 G 的函数本体代入</span>\n            = λn.IsZero n <span class=\"hljs-number\">1</span> (Mult n ((YG) (Pred n))) <span class=\"hljs-number\">3</span>                        <span class=\"hljs-comment\">// 进行一次 β-规约 (YG代入)</span>\n            = IsZero <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">1</span> (Mult <span class=\"hljs-number\">3</span> ((YG) (Pred <span class=\"hljs-number\">3</span>)))                                    <span class=\"hljs-comment\">// 进行一次 β-规约 (3 代入)</span>\n            = <span class=\"hljs-number\">3</span> * ((Y G) <span class=\"hljs-number\">2</span>)                                                                                <span class=\"hljs-comment\">// 根据函数定义计算一下结果</span>\n            = <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">2</span> * ((Y G) <span class=\"hljs-number\">1</span>)                                                                        <span class=\"hljs-comment\">// 再求一次 YG 2</span>\n            = <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1</span> *((Y G) <span class=\"hljs-number\">0</span>)                                                                <span class=\"hljs-comment\">// 再求一次 YG 1</span>\n            = <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">1</span> * <span class=\"hljs-number\">1</span>                                                                                <span class=\"hljs-comment\">// 再求一次 YG 0</span></code></pre>\n<p>所以可以看到，<code>YG</code> 确确实实就是函数<code>Fact</code>的匿名表示方式。</p>\n<p>这就是强大的 <code>Y</code>组合子，它可以在 <code>λ</code> 演算中找出任意递归函数的匿名表示的方法，而且形式及其简单，就是 <code>YG</code>，其中 <code>G: λf.Sf</code>，这里的 <code>S</code> 表示递归函数的函数本体。</p>\n<blockquote>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://www.zhihu.com/question/21099081/answer/23893046\">Y 不动点组合子用在哪里？ - Belleve 的回答 - 知乎</a></li>\n<li><a href=\"https://lizongwu.github.io/2017/07/03/%CE%BB%E6%BC%94%E7%AE%97-4-Y%E7%BB%84%E5%90%88%E5%AD%90%E4%B8%8E%E9%80%92%E5%BD%92/\">小袁的博客《λ 演算-4-Y 组合子与递归》</a></li>\n<li><a href=\"http://cgnail.github.io/academic/%CE%BB-4/\">为什么是 Y？</a></li>\n</ol>\n</blockquote>\n<h3 id=\"y-组合子的推导\">Y 组合子的推导</h3>\n<blockquote>\n<p>本部分内容参考 <code>g9yuayon</code> 大佬的博文： <a href=\"https://blog.csdn.net/g9yuayon/article/details/1271319\">Lambda 算子 5b：How of Y</a>，代码以 <code>JS</code> 展示。</p>\n<p>如果在阅读过程中遇到了看不懂的地方，请前往 <code>g9yuayon</code> 大佬的博文继续理解。</p>\n</blockquote>\n<p>我们知道 Y 组合子是用来可以找出任意递归函数的匿名表示方法，那么反过来，我们也可以在推导匿名递归函数的过程中重新抽象出<code>Y</code>组合子来。</p>\n<p>首先，我们用 <code>JS</code> 写出上一节的求阶乘函数：</p>\n<pre><code class=\"hljs js\">const <span class=\"hljs-built_in\">fact</span> = <span class=\"hljs-built_in\">n</span> =&gt; (<span class=\"hljs-built_in\">n</span> &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> <span class=\"hljs-symbol\">:</span> <span class=\"hljs-built_in\">n</span> * <span class=\"hljs-built_in\">fact</span>(<span class=\"hljs-built_in\">n</span> - <span class=\"hljs-number\">1</span>))</code></pre>\n<p>这是一个规规矩矩的递归函数，为了去除函数体中 <code>fact</code> 函数，让我们对函数进行一层抽象，把<code>fact</code>当成参数。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> G = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> (n &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : n * self(n - <span class=\"hljs-number\">1</span>))\n\n<span class=\"hljs-built_in\">console</span>.log(G(fact)(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// =&gt; 6</span>\n<span class=\"hljs-comment\">// 实际上 G(fact) = fact</span></code></pre>\n<p>虽然函数 G 中是没有 fact 函数的字样了，但是实际上这只是在函数外部套了一层函数，因为 <code>G(fact) = fact</code>。虽然这层抽象很重要，但是这并不是我们眼前要的结果，我们想要的是什么？匿名递归函数！<strong>即函数体内去除定义的函数名称</strong>，这怎么办呢？答案就是：让函数去调用自身！即把函数本身作为参数传递给自己。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fact2 = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> (n &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : n * self(self)(n - <span class=\"hljs-number\">1</span>))\n\n<span class=\"hljs-built_in\">console</span>.log(fact2(fact2)(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// =&gt; 6</span></code></pre>\n<p>这里的 <code>fact2</code> 变量只是函数 <code>self =&gt; n =&gt; (n &lt; 2 ? 1 : n * self(self)(n - 1))</code> 的一个代号而已了，因为函数体内不再包含这个名词。所以说，至此，我们已经实现了匿名的递归函数。</p>\n<p>但是这是只是这个特定函数的匿名表示，所以，现在我们需要基于这个特定的匿名表示，去推导出一个通用的求递归函数匿名表示的函数，也就是 Y 组合子。</p>\n<p>那么就让我们先把本函数的特定逻辑（也就是求阶乘的逻辑）提取出来吧：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> fact3 = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// 提取出来的求阶乘部分的特定逻辑</span>\n  <span class=\"hljs-keyword\">const</span> g = <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> (n &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : n * h(n - <span class=\"hljs-number\">1</span>))\n  <span class=\"hljs-keyword\">return</span> g(self(self))(n)\n}\n\n<span class=\"hljs-keyword\">const</span> fact = fact3(fact3)\n<span class=\"hljs-built_in\">console</span>.log(fact(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// =&gt; 6</span></code></pre>\n<p>可以看到 <code>fact3</code> 函数的内联函数 <code>g</code> 是一个独立的纯函数，所以，我们可以将其提取到函数外面。</p>\n<blockquote>\n<p>让我们再看一下这个内联函数 <code>g</code>，你是不是有种似曾相识的感觉，没错，这就是上面的函数 <code>G</code>。</p>\n</blockquote>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> G = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> (n &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : n * self(n - <span class=\"hljs-number\">1</span>))\n\n<span class=\"hljs-comment\">// 提取出来的求阶乘部分的特定逻辑</span>\n<span class=\"hljs-keyword\">const</span> fact3 = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> G(self(self))(n)\n\n<span class=\"hljs-keyword\">const</span> fact = fact3(fact3)\n<span class=\"hljs-built_in\">console</span>.log(fact(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// =&gt; 6</span></code></pre>\n<p>还记得上一节中的 <code>F = YG</code> 吗，<code>Y</code> 组合子就是接受了递归函数 <code>F</code> 抽象后的函数，然后得到了递归函数 <code>F</code> 匿名表示方式。</p>\n<p>其实上面的代码已经和 Y 组合子很接近了，把上面代码和 <code>F = YG</code> 一一对应一下，<code>F</code> 就是 <code>fact</code>，<code>G</code>就是<code>G</code>，那么 Y 组合子 就是第<code>4</code>行到第<code>8</code>行的表示了。让我们将其写成函数表示：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> G = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> (n &lt; <span class=\"hljs-number\">2</span> ? <span class=\"hljs-number\">1</span> : n * self(n - <span class=\"hljs-number\">1</span>))\n\n<span class=\"hljs-keyword\">const</span> Y = <span class=\"hljs-function\"><span class=\"hljs-params\">g</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-params\">self</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> g(self(self))(n)\n  <span class=\"hljs-keyword\">return</span> f(f)\n}\n\n<span class=\"hljs-keyword\">const</span> fact = Y(G)\n<span class=\"hljs-built_in\">console</span>.log(fact(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// =&gt; 6</span>\n<span class=\"hljs-comment\">// 我们做个验证：</span>\n<span class=\"hljs-comment\">// fact4(3) =&gt; Y(G)(3) =&gt; f(f)(3)</span>\n<span class=\"hljs-comment\">// f(f)(3) =&gt; x =&gt; f(f(f))(x) =&gt; (n =&gt; (n &lt; 2 ? 1 : n * g(g)(n - 1)))(x) =&gt; 传入 3：3 * f(f)(2)</span>\n<span class=\"hljs-comment\">// f(f)(2) =&gt; x =&gt; f(f(f)(x))</span></code></pre>\n<p>看到了吗，我们什么都没有做，仅仅是将<code>4~8</code>行代码放到了一个新的函数中，该函数接受<code>G</code>，返回<code>f(f)</code>，这个新函数就是<code>Y</code>组合子:</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Y = <span class=\"hljs-function\"><span class=\"hljs-params\">g</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> g(h(h))(n)\n  <span class=\"hljs-keyword\">return</span> f(f)\n}</code></pre>\n<p>让我们将这个 <code>JS</code> 版的 <code>Y</code> 组合子和 <code>λ</code> 演算中的 <code>Y</code>组合子对比一下是不是一致的。</p>\n<p>其中， <code>λ</code> 演算中的 <code>Y</code>组合子：<code>λf.(λx.f(x x))(λx.f(x x))</code>，为了便于对应，我们将 <code>λ</code> 演算中的 <code>Y</code>组合子进行 <code>α-转换</code>，将 <code>f</code> 转换成 <code>t</code>：<code>λt.(λx.t(x x))(λx.t(x x))</code>。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 参数 g 就是 t</span>\n<span class=\"hljs-keyword\">const</span> Y = <span class=\"hljs-function\"><span class=\"hljs-params\">g</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// 内联函数 f 就是 (λx.t(x x))</span>\n  <span class=\"hljs-comment\">// x 就是 n =&gt; g(h(h))(n) 这个函数，这里的 n 是任意东西，可不是单单表示一个数，还可以是数组等...</span>\n  <span class=\"hljs-keyword\">const</span> f = <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> g(h(h))(n)\n  <span class=\"hljs-comment\">// 这里的 return f(f) 就是 (λx.t(x x))(λx.t(x x))</span>\n  <span class=\"hljs-keyword\">return</span> f(f)\n}</code></pre>\n<h3 id=\"总结\">总结</h3>\n<p><code>λ</code>演算还是很有意思的，作为函数式编程的基础，还是要对其有个基本的了解。同时在学习的过程中，还了解了图灵机和<code>λ</code>演算由来的历史：希尔伯特第十问题、康托尔的对角线方法和哥德尔的不完备性定理等数学家们的伟大发现。</p>\n<h3 id=\"参考\">参考</h3>\n<ul>\n<li><a href=\"https://lizongwu.github.io/2017/02/11/%CE%BB%E6%BC%94%E7%AE%97-1-%E4%BB%8B%E7%BB%8D/\"> λ 演算(1): 介绍</a></li>\n<li><a href=\"http://cgnail.github.io/academic/%CE%BB-index/\">http://cgnail.github.io/academic/λ-index/</a></li>\n<li><a href=\"https://astraywu.github.io/2019/04/28/A-Tutorial-Introduction-to-the-%CE%BB-Calculus/\">《A Tutorial Introduction to the λ Calculus》</a></li>\n<li><a href=\"https://blog.csdn.net/pongba/article/details/621723\">图灵机杂思(rev#2)</a></li>\n</ul>\n"}