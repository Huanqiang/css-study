{"content":"<h1 id=\"vue-ssr-学习指南（小白向）\">Vue SSR 学习指南（小白向）</h1>\n<blockquote>\n<p>本文首先介绍了 SSR 的一些概念，然后提供了一个简单地基于 webpack 的 SSR Demo，并且详细地说明了可能遇到的 <code>Uncaught SyntaxError: Unexpected token &lt;</code> 错误及其解决方案。</p>\n</blockquote>\n<h2 id=\"概念\">概念</h2>\n<blockquote>\n<p>本章内容参考：<a href=\"https://zhuanlan.zhihu.com/p/47044039\">React 中同构（SSR）原理脉络梳理</a></p>\n</blockquote>\n<h3 id=\"1-客户端渲染\">1. 客户端渲染</h3>\n<p>客户端渲染应该是我们最熟悉的，像基于 Vue/React 等 UI 库开发的 SPA 应用就是客户端渲染的典型代表。在客户端渲染时，首先浏览器会向服务器发送网页请求，服务器返回 <code>index.html</code>，而这个 html 通常只有一个 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 标签，所以浏览器必然会历经一个白屏时间，然后浏览器加载并执行 js （Vue 或是 React）生成 UI 界面，并把执行结果插入到指定标签上（即在网页上渲染出 Vue/React 生成的 UI）。</p>\n<h3 id=\"2-服务端渲染\">2. 服务端渲染</h3>\n<p>服务端渲染就是指当客户端向服务器发送页面请求的时候，服务端会把完整页面的 html 代码发送回来，而不是发送一个仅包含空标签的 html，客户端只需要根据这份 html 即可把完整的页面渲染出来，无需 js 额外的操作。</p>\n<blockquote>\n<p>服务端并不是一个新的东西，其实在前端工程化出来之前，早期的 J2EE 和 SSM 框架还是前后端不分离的，这类项目基于 JSP 等模板提供前端页面，浏览器向服务器发送请求的时候，服务器就是返回完整的 html 页面，然后浏览器加载并渲染即可，这就是服务端渲染。</p>\n</blockquote>\n<p>那随着前端工程化的发展，人们发现客户端渲染带来了很多优点：</p>\n<ol>\n<li>前后端分离，极大地降低了项目的复杂度，清晰明确了开发职责；</li>\n<li>React、Vue 等框架极大地提升了前端开发体验，而且也提升了用户体验和丰富的前端效果；</li>\n<li>页面懒加载；</li>\n<li>前端路由：用户在切换页面的时候无需向后端发送页面请求，极大地提高了用户体验；</li>\n<li>节约了服务器成本：省电省钱，JS 支持 CDN 部署，且部署极其简单，只需要服务器支持静态文件即可；</li>\n</ol>\n<p>所以客户端渲染开始代替服务端渲染成为了近些年来的前端开发选择。</p>\n<h3 id=\"3-同构（ssr）\">3. 同构（SSR）</h3>\n<p>但是，前面我们提到当浏览器进行客户端渲染时，一开始浏览器仅会返回一个包含空标签的简单模板，需要加载 JS，并等待 JS 执行完以提供完整的页面 UI。这就会带来一些问题：</p>\n<ol>\n<li>首页白屏问题（即首屏性能）：如果 JS 很大，那么用户必然会历经很长的白屏时间才能看到页面；</li>\n<li>SEO 问题；</li>\n</ol>\n<p>所以为了解决这些问题，人们提出了同构的概念，同构实际上是客户端渲染和服务器端渲染的一个整合，使用服务端渲染来解决首页白屏问题和 SEO 问题的同时，又保持了客户端渲染的优势。整体流程如下：</p>\n<p>首先，服务端会执行一次我们的代码，生成完整的 HTML 页面，返回给浏览器，浏览器就可以通过它快速地渲染出来完整界面，然后等待 JS 加载完成后，Vue/React 再执行一次生成 UI 界面，并接管之后的页面交互。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/SSR.jpg\" alt=\"SSR\"></p>\n<blockquote>\n<p>图来源于：<a href=\"https://zhuanlan.zhihu.com/p/47044039\">React 中同构（SSR）原理脉络梳理</a></p>\n</blockquote>\n<h2 id=\"基本用法\">基本用法</h2>\n<p>参考：这部分官网写的就够看了：<a href=\"https://ssr.vuejs.org/zh/guide/#%E5%AE%89%E8%A3%85\">《Vue-SSR 基本用法》</a></p>\n<h2 id=\"同构-demo\">同构 Demo</h2>\n<h3 id=\"项目源码结构\">项目源码结构</h3>\n<p>我们的项目源码基本上如上所示</p>\n<pre><code>├── <span class=\"hljs-selector-tag\">config</span>\n│   ├── <span class=\"hljs-selector-tag\">webpack</span><span class=\"hljs-selector-class\">.base</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>        # 基础的通用配置\n│   ├── <span class=\"hljs-selector-tag\">webpack</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>    # 客户端渲染配置\n│   └── <span class=\"hljs-selector-tag\">webpack</span><span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>    # 服务端渲染配置\n├── <span class=\"hljs-selector-tag\">src</span>\n│   ├── <span class=\"hljs-selector-tag\">App</span><span class=\"hljs-selector-class\">.vue</span>\n│   ├── <span class=\"hljs-selector-tag\">app</span><span class=\"hljs-selector-class\">.js</span>                    # 通用 <span class=\"hljs-selector-tag\">entry</span>(<span class=\"hljs-selector-tag\">universal</span> <span class=\"hljs-selector-tag\">entry</span>)\n│   ├── <span class=\"hljs-selector-tag\">entry-client</span><span class=\"hljs-selector-class\">.js</span> # 仅运行于浏览器\n│   └── <span class=\"hljs-selector-tag\">entry-server</span><span class=\"hljs-selector-class\">.js</span> # 仅运行于服务器\n├── <span class=\"hljs-selector-tag\">index</span><span class=\"hljs-selector-class\">.template</span><span class=\"hljs-selector-class\">.html</span>    # <span class=\"hljs-selector-tag\">html</span> 模板\n├── <span class=\"hljs-selector-tag\">package</span><span class=\"hljs-selector-class\">.json</span>\n└── <span class=\"hljs-selector-tag\">server</span><span class=\"hljs-selector-class\">.js</span>                        # <span class=\"hljs-selector-tag\">node</span> 启动的 <span class=\"hljs-selector-tag\">ssr</span></code></pre><h4 id=\"indextemplatehtml\"><code>index.template.html</code></h4>\n<pre><code class=\"hljs html\"><span class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span> /&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ title }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--vue-ssr-outlet--&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span></code></pre>\n<p>这里需要注意的是， body 中无需 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 这样的空标签锚点，它被移到了 <code>App.vue</code>，文件中了，取而代之的是 <code>&lt;!--vue-ssr-outlet--&gt;</code> 这个注释，它相当于服务端渲染的锚点，如果没有这个注释，程序就会报错。</p>\n<h4 id=\"appvue\"><code>App.vue</code></h4>\n<pre><code class=\"hljs vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello Vue SSR<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> </span></span><span class=\"hljs-template-variable\">{}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></code></pre>\n<p>这是一个简单的 Vue 单文件组件</p>\n<h4 id=\"appjs\"><code>app.js</code></h4>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App.vue'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createApp</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n    <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n  })\n\n  <span class=\"hljs-keyword\">return</span> { app }\n}</code></pre>\n<p>这里之所以返回一个工厂函数而不是一个 Vue 实例是因为：</p>\n<blockquote>\n<p>官方解释：</p>\n<p>当编写纯客户端 (client-only) 代码时，我们习惯于每次在新的上下文中对代码进行取值。但是，Node.js 服务器是一个长期运行的进程。当我们的代码进入该进程时，它将进行一次取值并留存在内存中。这意味着如果创建一个单例对象，它将在每个传入的请求之间共享。</p>\n<p>如基本示例所示，我们<strong>为每个请求创建一个新的根 Vue 实例</strong>。这与每个用户在自己的浏览器中使用新应用程序的实例类似。如果我们在多个请求之间使用一个共享的实例，很容易导致交叉请求状态污染 (cross-request state pollution)。</p>\n<p>因此，我们不应该直接创建一个应用程序实例，而是应该暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例：</p>\n</blockquote>\n<h4 id=\"entry-clientjs\"><code>entry-client.js</code></h4>\n<pre><code class=\"hljs js\">import createApp from './<span class=\"hljs-keyword\">app</span>'\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-keyword\">app</span> } = createApp()\n\n<span class=\"hljs-keyword\">app</span>.<span class=\"hljs-variable\">$mount</span>('#<span class=\"hljs-keyword\">app</span>')</code></pre>\n<h4 id=\"entry-serverjs\"><code>entry-server.js</code></h4>\n<pre><code class=\"hljs js\">import createApp <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app'</span>\n\n<span class=\"hljs-builtin-name\">export</span><span class=\"hljs-built_in\"> default </span>context =&gt; {\n  const { app } = createApp()\n  return app\n}</code></pre>\n<h3 id=\"配置-webpack\">配置 <code>webpack</code></h3>\n<h4 id=\"1-通用配置\">1. 通用配置</h4>\n<p>需要安装的<code>npm</code>包：</p>\n<pre><code class=\"hljs shell\">npm install --save koa koa-<span class=\"hljs-keyword\">static</span> vue vue-<span class=\"hljs-keyword\">server</span>-renderer</code></pre>\n<p>以上这些<code>npm</code>包是整个项目生命周期中都会用到的。而下面的这些仅仅在打包的时候使用：</p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> -D css-loader html-webpack-<span class=\"hljs-keyword\">plugin</span> vue-loader vue-<span class=\"hljs-keyword\">style</span>-loader vue-<span class=\"hljs-keyword\">template</span>-compiler webpack webpack-cli webpack-<span class=\"hljs-keyword\">merge</span> webpack-dev-<span class=\"hljs-keyword\">server</span></code></pre>\n<p>本文提供了一个简要的 <code>Vue-SSR</code> 的配置，具体如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack.base.config.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>)\n<span class=\"hljs-keyword\">const</span> VueLoaderPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-loader/lib/plugin'</span>)\n\n<span class=\"hljs-keyword\">const</span> reslove = <span class=\"hljs-function\"><span class=\"hljs-params\">file</span> =&gt;</span> path.resolve(__dirname + <span class=\"hljs-string\">'/'</span> + file)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: <span class=\"hljs-string\">'./src/index.js'</span>,\n  output: {\n    path: reslove(<span class=\"hljs-string\">'../dist/'</span>),\n    filename: <span class=\"hljs-string\">'[name].app.js'</span>,\n    chunkFilename: <span class=\"hljs-string\">'[name].app.js'</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        exclude: <span class=\"hljs-regexp\">/node_modules/</span>,\n        use: [<span class=\"hljs-string\">'vue-style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>]\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.vue$/</span>,\n        use: [<span class=\"hljs-string\">'vue-loader'</span>]\n      }\n    ]\n  },\n  plugins: [\n    <span class=\"hljs-keyword\">new</span> VueLoaderPlugin(),\n    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n      template: reslove(<span class=\"hljs-string\">'../index.template.html'</span>)\n    })\n  ]\n}</code></pre>\n<p>因为是 vue 项目，所以我们需要安装 <code>vue-loader</code>、<code>vue-style-loader</code> 来识别 <code>vue</code> 单文件组件，并使用<code>html-webpack-plugin</code> 插件来将生成的主文件注入到 html 模板文件中。同时我们还需要在 plugins 中配置 <code>new VueLoaderPlugin()</code>。</p>\n<h4 id=\"2-客户端配置\">2. 客户端配置</h4>\n<p>首先安装 <code>vue-server-renderer</code> ，该 npm 包提供了 SSR 所需的 API 和 webpack 插件。</p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> vue-<span class=\"hljs-keyword\">server</span>-renderer</code></pre>\n<p><code>webpack.client.config.js</code> 文件如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack.client.config.js</span>\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-merge'</span>)\n<span class=\"hljs-keyword\">const</span> baseConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.base.config'</span>)\n<span class=\"hljs-keyword\">const</span> VueSSRClientPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-server-renderer/client-plugin'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = merge(baseConfig, {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'development'</span>,\n  <span class=\"hljs-comment\">// 修改入口为 entry-client.js</span>\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'./src/entry-client.js'</span>,\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">'inline-source-map'</span>,\n  <span class=\"hljs-comment\">// 此插件在输出目录中 生成 `vue-ssr-client-manifest.json`。</span>\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> VueSSRClientPlugin()]\n})</code></pre>\n<p><code>vue-ssr-client-manifest.json</code> 包含了 webpack 整个构建过程中的所有信息，从而可以让 <code>bundle renderer</code> 自动推导需要在 <code>HTML</code> 模板中注入的内容。</p>\n<h4 id=\"3-服务端配置\">3. 服务端配置</h4>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// webpack.server.config.js</span>\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack-merge'</span>)\n<span class=\"hljs-keyword\">const</span> baseConfig = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./webpack.base.config'</span>)\n<span class=\"hljs-keyword\">const</span> VueSSRServerPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-server-renderer/server-plugin'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = merge(baseConfig, {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'development'</span>,\n  <span class=\"hljs-comment\">// 修改入口文件为 entry-server.js</span>\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'./src/entry-server.js'</span>,\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">'source-map'</span>,\n  <span class=\"hljs-comment\">// 因为服务端渲染是在 node 环境下操作的，所以需要配置这个，以便告知 vue-loader 将 Vue 组件编译成面向服务器的代码。</span>\n  <span class=\"hljs-comment\">// 允许 webpack 以 Node 适用方式(Node-appropriate fashion)处理动态导入(dynamic import);</span>\n  <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'node'</span>,\n  <span class=\"hljs-comment\">// 此处告知 server bundle 使用 Node 风格导出模块(Node-style exports)</span>\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">libraryTarget</span>: <span class=\"hljs-string\">'commonjs2'</span>\n  },\n  <span class=\"hljs-comment\">// 这是将服务器的整个输出 构建为单个 JSON 文件的插件。</span>\n  <span class=\"hljs-comment\">// 默认文件名为 `vue-ssr-server-bundle.json`</span>\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> VueSSRServerPlugin()]\n})</code></pre>\n<h4 id=\"4-packagejson\">4. <code>package.json</code></h4>\n<p>然后在 <code>package.json</code> 文件的 <code>scripts</code> 中加入 build 命令，此后就可以使用 <code>npm run build</code> 来打包构建项目了。</p>\n<pre><code><span class=\"hljs-string\">\"scripts\"</span>: {\n  <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"</span><span class=\"hljs-keyword\">Error</span>: <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">test</span> specified\\<span class=\"hljs-string\">\" &amp;&amp; exit 1\"</span>,\n  <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"npm run build:client &amp;&amp; npm run build:server\"</span>,\n  <span class=\"hljs-string\">\"build:client\"</span>: <span class=\"hljs-string\">\"webpack --config config/webpack.client.config.js\"</span>,\n  <span class=\"hljs-string\">\"build:server\"</span>: <span class=\"hljs-string\">\"webpack --config config/webpack.server.config.js\"</span>\n},</code></pre><p>打包出来的目录如下：</p>\n<pre><code>├── <span class=\"hljs-keyword\">dist\n</span>│   ├── index.html\n│   ├── main.app.<span class=\"hljs-keyword\">js </span>                                       <span class=\"hljs-comment\"># 打包出来的 js</span>\n│   ├── vue-ssr-client-manifest.<span class=\"hljs-keyword\">json </span>   <span class=\"hljs-comment\"># 客户端配置生成的 manifest 文件</span>\n└── └── vue-ssr-server-<span class=\"hljs-keyword\">bundle.json </span>       <span class=\"hljs-comment\"># 服务端配置打包结果(仅此一个文件，其余的都是 `npm run build:client` 生成的)</span></code></pre><blockquote>\n<p>这里的 <code>index.html</code> 实际上是 <code>HtmlWebpackPlugin</code> 生成的，该插件基于我们设置的 template 来生成一个新的 <code>html</code> 文件，默认名为 <code>index.html</code></p>\n</blockquote>\n<h3 id=\"启动-node-服务器\">启动 <code>Node</code> 服务器</h3>\n<p>这里我们使用 koa 来启动一个 Nodejs 的服务器。整个文件如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa'</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"hljs-keyword\">const</span> serve = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa-static'</span>)\n<span class=\"hljs-keyword\">const</span> { createBundleRenderer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-server-renderer'</span>)\n\n<span class=\"hljs-keyword\">const</span> clientManifest = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dist/vue-ssr-client-manifest.json'</span>)\n<span class=\"hljs-keyword\">const</span> serverBundle = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dist/vue-ssr-server-bundle.json'</span>)\n\n<span class=\"hljs-comment\">// 创建 bundle renderer</span>\n<span class=\"hljs-keyword\">const</span> renderer = createBundleRenderer(serverBundle, {\n  basedir: path.resolve(__dirname, <span class=\"hljs-string\">'/dist/'</span>),\n  runInNewContext: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-comment\">// 使用 clientManifest 进行资源注入：自动推断出最佳的预加载(preload)和预取(prefetch)指令，以及初始渲染所需的代码分割 chunk。</span>\n  clientManifest,\n  template: fs.readFileSync(<span class=\"hljs-string\">'./index.template.html'</span>, <span class=\"hljs-string\">'utf-8'</span>)\n})\n\n<span class=\"hljs-comment\">// 创建一个 koa 实例</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()\n\n<span class=\"hljs-comment\">// 借助 koa-static，将打包出来的文件（dist目录下）都作为静态资源文件，以便浏览器可以访问到，</span>\napp.use(serve(<span class=\"hljs-string\">'dist'</span>, { index: <span class=\"hljs-string\">'xxx.html'</span> }))\n\n<span class=\"hljs-comment\">// 在 koa 中间件中读取并设置网页内容</span>\napp.use(<span class=\"hljs-keyword\">async</span> ctx =&gt; {\n  <span class=\"hljs-keyword\">const</span> context = {\n    title: <span class=\"hljs-string\">'Vue SSR'</span>,\n    url: ctx.req.url\n  }\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 通过 bundle renderer 将 Vue 实例渲染为字符串</span>\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-keyword\">await</span> renderer.renderToString(context)\n    <span class=\"hljs-built_in\">console</span>.log(html)\n    <span class=\"hljs-comment\">// 将返回 html 设置到页面上；</span>\n    ctx.body = html\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-built_in\">console</span>.error(err)\n  }\n})\n\n<span class=\"hljs-comment\">// 启动 node 服务器，监听 3000 端口</span>\napp.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'应用程序开始运行于 3000 端口'</span>)\n})</code></pre>\n<p>首先我们配置一个基于 koa 的 node 服务器：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa'</span>)\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()\n\napp.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'应用程序开始运行于 3000 端口'</span>)\n})</code></pre>\n<p>然后我们根据打包生成的 <code>vue-ssr-client-manifest.json</code> 和 <code>vue-ssr-server-bundle.json</code> 来生成 <code>bundle renderer</code> 实例。再通过 <code>bundle renderer</code> 实例所提供的 <code>API</code> 来将打包的 Vue 实例渲染成字符串，并返回给 <code>ctx</code>。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> { createBundleRenderer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'vue-server-renderer'</span>)\n<span class=\"hljs-keyword\">const</span> clientManifest = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dist/vue-ssr-client-manifest.json'</span>)\n<span class=\"hljs-keyword\">const</span> serverBundle = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dist/vue-ssr-server-bundle.json'</span>)\n\n<span class=\"hljs-comment\">// 创建 bundle renderer</span>\n<span class=\"hljs-keyword\">const</span> renderer = createBundleRenderer(serverBundle, {\n  <span class=\"hljs-attr\">basedir</span>: path.resolve(__dirname, <span class=\"hljs-string\">'/dist/'</span>),\n  <span class=\"hljs-attr\">runInNewContext</span>: <span class=\"hljs-literal\">false</span>,\n  clientManifest,\n  <span class=\"hljs-attr\">template</span>: fs.readFileSync(<span class=\"hljs-string\">'./index.template.html'</span>, <span class=\"hljs-string\">'utf-8'</span>)\n})\n\napp.use(serve(<span class=\"hljs-string\">'dist'</span>, { <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">'xxx.html'</span> }))\n\n<span class=\"hljs-comment\">// 在 koa 中间件中读取并设置网页内容</span>\napp.use(<span class=\"hljs-keyword\">async</span> ctx =&gt; {\n  <span class=\"hljs-keyword\">const</span> context = {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Vue SSR'</span>,\n    <span class=\"hljs-attr\">url</span>: ctx.req.url\n  }\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// 通过 bundle renderer 将 Vue 实例渲染为字符串</span>\n    <span class=\"hljs-keyword\">const</span> html = <span class=\"hljs-keyword\">await</span> renderer.renderToString(context)\n    <span class=\"hljs-built_in\">console</span>.log(html)\n    <span class=\"hljs-comment\">// 将 html 返回给 ctx；</span>\n    ctx.body = html\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    <span class=\"hljs-built_in\">console</span>.error(err)\n  }\n})</code></pre>\n<h3 id=\"可能遇到的问题\">可能遇到的问题</h3>\n<h4 id=\"问题-1：uncaught-syntaxerror-unexpected-token\">问题 1：<code>Uncaught SyntaxError: Unexpected token &lt;</code></h4>\n<p>如果没有在设置 <code>ctx.body</code> 之前使用 <code>app.use(serve(&#39;dist&#39;, { index: &#39;xxx.html&#39; }))</code> 把 <code>dist</code> 文件夹下的文件设置为静态资源，那么 <code>chrome</code> 调试工具将会出现下图错误：<br><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/Uncaught-SyntaxError.png\" alt=\"Uncaught SyntaxError\"></p>\n<p>打开 <code>chrome</code> 调试工具的 <code>Sources</code> 页你将会发现以下信息：<br><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/Uncaught-SyntaxError-google-sources.png\" alt=\"Uncaught SyntaxError-google-sources\"></p>\n<p>这个时候你就会很奇怪，这个 <code>main.app.js</code> 应该是一个<code>JS</code>文件，怎么会出现 <code>html</code> 的信息呢？</p>\n<p>其实这是因为这个时候你已经完成了服务端渲染，而且也成功地将服务端返回的<code>HTML</code>页面渲染到了浏览器上，但是因为我们没有将 <code>dist</code> 文件下的文件设置为静态资源，所以浏览器将拿不到这个 <code>main.app.js</code>，并且错误将其内容填充为了 <code>HTML</code>，所以才会出现以上错误。而且要注意的是，你这个时候也<strong>仅仅是完成了服务端渲染，还没有进行客户端渲染</strong>，为了更直观的看到效果，我们使用 chrome 的性能调试工具来看一下刷一次网页，浏览器发生了什么，如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/noStaticSSR.png\" alt=\"noStaticSSR\"></p>\n<p>从图中我们可以到浏览器成功的解析了 HTML，并将其渲染到了网页上，但是接下来并没有进行客户端渲染的操作，让我们对比正确的刷新操作（如下图），我们可以发现，下图中间多了一段 <code>main.app.js</code> 执行的过程，而这段过程正是我们的客户端渲染的过程。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/rightSSR.png\" alt=\"rightSSR\"></p>\n<p>现在了解了此时我们仅仅是完成了服务端渲染，还没有进行客户端渲染之后，回到问题，我们如何完成同构呢？答案就是将 <code>dist</code> 文件下的文件设置为静态资源文件，以便让浏览器能够去获取到对应的 <code>main.app.js</code> 这个资源，所以我们需要借助 <code>koa-static</code>。</p>\n<p>于是你可能去看 <a href=\"https://github.com/koajs/static#example\">koa-static 官网的使用说明</a>，并在设置 <code>ctx.body</code> 之前写下了下面代码：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-variable\">app.use</span>(<span class=\"hljs-function\"><span class=\"hljs-title\">serve</span>(<span class=\"hljs-string\">'dist'</span>))</span></code></pre>\n<p>这个时候，你就会看到一个全白的页面，什么东西没有显示，连网页 <code>title</code> 都从之前的 <code>Vue SSR</code> 变成了 <code>{{ title }}</code> 。</p>\n<p>这个时候，打开 <code>chrome devTools</code> 可以看到 <code>Cannot find element: #app</code> 的错误：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Huanqiang/imgBed/blog/Cannot-find-element.png\" alt=\"Cannot find element - #app\"></p>\n<p>这个时候我们细心观察将会发现以下两个问题：</p>\n<ol>\n<li>我们打开 <code>Sources</code> 会发现<code>index</code> 文件的内容变成了 <code>dist</code> 文件夹下 <code>index.html</code> 中的，反而是 <code>main.app.js</code> 倒是正确的加载出来了。</li>\n<li><code>server.js</code> 的程序怎么都进不去 <code>在 koa 中间件中读取并设置网页内容</code> 这部分代码了（即 27-42 行）。</li>\n</ol>\n<p>其实从第一个点，我们可以看出来事实上我们已经成功地将 <code>dist</code> 文件下的文件设置为静态资源文件，而且应用程序也成功地读取到了需要的文件。但是 <code>koa-static</code> 有一个默认配置项是 <a href=\"https://github.com/koajs/static#options\"><code>index</code></a>，默认值为 <code>index.html</code>，而且它是基于 <code>koa-send</code> 开发的，而 <code>koa-send</code> 有一个设定就是如果你传入的目录里面有你设置的 <code>index</code> 这个文件，那么它就会把这个文件设置为 <code>ctx.body</code>。</p>\n<p>而我们的 <code>dist</code> 文件夹中正好有一个 <code>index.html</code> 文件，所以 <code>koa-static</code> 在读取这个文件夹的时候就会把这个 <code>index.html</code> 文件返回给 <code>ctx.body</code>，同时不会进入下一个 <code>koa</code> 中间件，所以我们才会遇到上述两个问题。</p>\n<p>同时浏览器在渲染了 <code>index.html</code> 并加载了 <code>main.app.js</code> 后就开始执行 <code>main.app.js</code>， <code>main.app.js</code>走的就是正常的客户端渲染，它是需要一个 <code>id=“app”</code> 的标签来承载内容的，而我们的 <code>index.htm</code>l 文件的 <code>body</code> 中空空如也，所以就报了上述错误。</p>\n<p>解决方案很简单，就是给 <code>koa-static</code> 的 <code>index</code> 可选项随便设置一个名称就好了。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-selector-tag\">app</span><span class=\"hljs-selector-class\">.use</span>(serve(<span class=\"hljs-string\">'dist'</span>, { <span class=\"hljs-attribute\">index</span>: <span class=\"hljs-string\">'xxx.html'</span> }))</code></pre>\n"}